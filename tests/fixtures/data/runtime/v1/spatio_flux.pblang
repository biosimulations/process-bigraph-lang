// imported definitions from standard library (or other files)
def exp(a): builtin
def signum(a): builtin
def ReLU(a): signum(a) * a;

// def update_float(a, b): (a + b);
// type float default 0.0 update update_float
type float builtin
type string builtin

def update_float_unsigned(a, b): ReLU(a + b);
type positive_float extends float update update_float_unsigned

type substrates
    glucose: positive_float
    acetate: positive_float
    biomass: positive_float

// type float_array: array[positive_float, (4,4)]
// type field
//     glucose: float_array
//     acetate: float_array
//     biomass: float_array


type bounds
    lower: maybe[float]
    upper: maybe[float]

type particle
    id: string
    // 'position': 'tuple[float,float]',
    size: float
    mass: float default 1.0
    // 'local': 'map[float]',
    // 'exchange': 'map[float]',    # {mol_id: delta_value}


type boundary_side builtin // 'enum[left,right,top,bottom]'

type substrate_role builtin // 'enum[reactant,product,enzyme]'

type kinetics
    vmax: float
    kcat: float
    role: substrate_role

type reaction_type builtin // 'map[kinetics]'


// my model
type concentration extends float default 1.0


def my_update(substrate, rate, interval): substrate + rate * interval;
unit uM_per_h: ["10e-6 mole/liter/h"]
unit uM: ["10e-6 mole/liter"]
unit conc: uM_per_h
unit hour: ["h"]
unit dimensionless: ["1"]


process_def dfba path jdfkljfaldjflkasjdf


    var substrate_var: substrates

    inputs substrate_var
    outputs substrate_var


process_def MyProcess
    param calcium_growth: float default 0.1 [uM_per_h]
    param glucose_growth: float default 0.1 [uM_per_h]
    param dt: float default 0.1 [hour]
    param alpha: float default 0.1 [dimensionless]

    var glucose: float
    var calcium: float [conc]

    inputs glucose calcium
    outputs glucose calcium

    updates
        glucose := my_update(glucose, glucose_growth, dt);
        calcium := calcium * (1-exp(dt)) + alpha * calcium_growth * dt;


store_def dfba_substrates_input_output
    state_def substr: substrates


composite_def CellComposite
